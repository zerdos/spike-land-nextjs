--- a/src/app/client/page.tsx
+++ b/src/app/client/page.tsx
@@ -211,120 +211,173 @@ function ClientPageContent() {
     const init = async () => {
       try {
         // Fetch Twilio ICE servers
         const iceServers = await getTwilioIceServers();

-        // Initialize PeerJS
-        const peer = new Peer({
-          config: { iceServers }
-        });
-
-        peerRef.current = peer;
+        let peersInitialized = 0;
+        const peersNeeded = isDualCameraMode ? 2 : 1;

-        peer.on('open', async () => {
-          if (!mounted) return;
-
-          try {
-            if (isDualCameraMode) {
-              // Start both cameras
-              const [frontResult, backResult] = await Promise.all([
-                startCamera('user'),
-                startCamera('environment')
-              ]);
-
-              if (!mounted) return;
-
-              // Setup front camera
-              setFrontCamera(prev => ({
-                ...prev,
-                stream: frontResult.stream,
-                zoom: frontResult.zoom,
-                zoomSupported: frontResult.zoomSupported,
-                zoomRange: frontResult.zoomRange
-              }));
-
-              if (frontVideoRef.current) {
-                frontVideoRef.current.srcObject = frontResult.stream;
-              }
-
-              const frontCall = createCameraCall(frontResult.stream, 'front');
-              setFrontCamera(prev => ({ ...prev, call: frontCall }));
-
-              // Setup back camera
-              setBackCamera(prev => ({
-                ...prev,
-                stream: backResult.stream,
-                zoom: backResult.zoom,
-                zoomSupported: backResult.zoomSupported,
-                zoomRange: backResult.zoomRange
-              }));
-
-              if (backVideoRef.current) {
-                backVideoRef.current.srcObject = backResult.stream;
-              }
-
-              const backCall = createCameraCall(backResult.stream, 'back');
-              setBackCamera(prev => ({ ...prev, call: backCall }));
-
-            } else {
-              // Start single camera (detect device type)
-              const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
-                navigator.userAgent
-              );
-              const defaultMode = isMobile ? 'environment' : 'user';
-              const savedMode = localStorage.getItem('preferredCamera');
-              const facingMode = (savedMode === 'user' || savedMode === 'environment') ? savedMode : defaultMode;
-
-              const result = await startCamera(facingMode as CameraFacingMode);
-
-              if (!mounted) return;
-
-              if (facingMode === 'user') {
-                setFrontCamera(prev => ({
-                  ...prev,
-                  stream: result.stream,
-                  zoom: result.zoom,
-                  zoomSupported: result.zoomSupported,
-                  zoomRange: result.zoomRange
-                }));
-
-                if (frontVideoRef.current) {
-                  frontVideoRef.current.srcObject = result.stream;
-                }
-
-                const call = createCameraCall(result.stream, 'front');
-                setFrontCamera(prev => ({ ...prev, call }));
-              } else {
-                setBackCamera(prev => ({
-                  ...prev,
-                  stream: result.stream,
-                  zoom: result.zoom,
-                  zoomSupported: result.zoomSupported,
-                  zoomRange: result.zoomRange
-                }));
-
-                if (backVideoRef.current) {
-                  backVideoRef.current.srcObject = result.stream;
-                }
-
-                const call = createCameraCall(result.stream, 'back');
-                setBackCamera(prev => ({ ...prev, call }));
-              }
-            }
-
-            setIsLoading(false);
-          } catch {
-            setIsLoading(false);
+        // Initialize PeerJS instances
+        if (isDualCameraMode) {
+          // Create two separate Peer instances with unique IDs
+          const frontPeer = new Peer({
+            config: { iceServers }
+          });
+
+          const backPeer = new Peer({
+            config: { iceServers }
+          });
+
+          frontPeerRef.current = frontPeer;
+          backPeerRef.current = backPeer;
+
+          // Wait for both peers to be ready
+          frontPeer.on('open', async (id) => {
+            console.log('Front peer opened with ID:', id);
+            peersInitialized++;
+            if (peersInitialized === peersNeeded && mounted) {
+              await initializeCameras();
+            }
+          });
+
+          backPeer.on('open', async (id) => {
+            console.log('Back peer opened with ID:', id);
+            peersInitialized++;
+            if (peersInitialized === peersNeeded && mounted) {
+              await initializeCameras();
+            }
+          });
+
+          frontPeer.on('error', () => {
+            setError({
+              message: 'Failed to establish front camera peer connection.',
+              type: 'connection'
+            });
+          });
+
+          backPeer.on('error', () => {
+            setError({
+              message: 'Failed to establish back camera peer connection.',
+              type: 'connection'
+            });
+          });
+        } else {
+          // Single camera mode - create one peer
+          const peer = new Peer({
+            config: { iceServers }
+          });
+
+          // Determine which peer ref to use based on camera preference
+          const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
+            navigator.userAgent
+          );
+          const defaultMode = isMobile ? 'environment' : 'user';
+          const savedMode = localStorage.getItem('preferredCamera');
+          const facingMode = (savedMode === 'user' || savedMode === 'environment') ? savedMode : defaultMode;
+
+          if (facingMode === 'user') {
+            frontPeerRef.current = peer;
+          } else {
+            backPeerRef.current = peer;
           }
-        });

-        peer.on('error', () => {
-          setError({
-            message: 'Failed to establish peer connection. Please check your internet.',
-            type: 'connection'
+          peer.on('open', async () => {
+            if (!mounted) return;
+            await initializeCameras();
           });
-        });
+
+          peer.on('error', () => {
+            setError({
+              message: 'Failed to establish peer connection. Please check your internet.',
+              type: 'connection'
+            });
+          });
+        }
+
+        async function initializeCameras() {
+          if (!mounted) return;
+
+          try {
+            if (isDualCameraMode) {
+              // Start both cameras
+              const [frontResult, backResult] = await Promise.all([
+                startCamera('user'),
+                startCamera('environment')
+              ]);
+
+              if (!mounted) return;
+
+              // Setup front camera
+              setFrontCamera(prev => ({
+                ...prev,
+                stream: frontResult.stream,
+                zoom: frontResult.zoom,
+                zoomSupported: frontResult.zoomSupported,
+                zoomRange: frontResult.zoomRange
+              }));
+
+              if (frontVideoRef.current) {
+                frontVideoRef.current.srcObject = frontResult.stream;
+              }
+
+              const frontCall = createCameraCall(frontResult.stream, 'front');
+              setFrontCamera(prev => ({ ...prev, call: frontCall }));
+
+              // Setup back camera
+              setBackCamera(prev => ({
+                ...prev,
+                stream: backResult.stream,
+                zoom: backResult.zoom,
+                zoomSupported: backResult.zoomSupported,
+                zoomRange: backResult.zoomRange
+              }));
+
+              if (backVideoRef.current) {
+                backVideoRef.current.srcObject = backResult.stream;
+              }
+
+              const backCall = createCameraCall(backResult.stream, 'back');
+              setBackCamera(prev => ({ ...prev, call: backCall }));
+
+            } else {
+              // Start single camera (detect device type)
+              const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
+                navigator.userAgent
+              );
+              const defaultMode = isMobile ? 'environment' : 'user';
+              const savedMode = localStorage.getItem('preferredCamera');
+              const facingMode = (savedMode === 'user' || savedMode === 'environment') ? savedMode : defaultMode;
+
+              const result = await startCamera(facingMode as CameraFacingMode);
+
+              if (!mounted) return;
+
+              if (facingMode === 'user') {
+                setFrontCamera(prev => ({
+                  ...prev,
+                  stream: result.stream,
+                  zoom: result.zoom,
+                  zoomSupported: result.zoomSupported,
+                  zoomRange: result.zoomRange
+                }));
+
+                if (frontVideoRef.current) {
+                  frontVideoRef.current.srcObject = result.stream;
+                }
+
+                const call = createCameraCall(result.stream, 'front');
+                setFrontCamera(prev => ({ ...prev, call }));
+              } else {
+                setBackCamera(prev => ({
+                  ...prev,
+                  stream: result.stream,
+                  zoom: result.zoom,
+                  zoomSupported: result.zoomSupported,
+                  zoomRange: result.zoomRange
+                }));
+
+                if (backVideoRef.current) {
+                  backVideoRef.current.srcObject = result.stream;
+                }
+
+                const call = createCameraCall(result.stream, 'back');
+                setBackCamera(prev => ({ ...prev, call }));
+              }
+            }
+
+            setIsLoading(false);
+          } catch {
+            setIsLoading(false);
+          }
+        }

       } catch {
         setIsLoading(false);
@@ -341,10 +394,13 @@ function ClientPageContent() {
       if (backCamera.call) {
         backCamera.call.close();
       }
-      if (peerRef.current) {
-        peerRef.current.destroy();
+      if (frontPeerRef.current) {
+        frontPeerRef.current.destroy();
       }
+      if (backPeerRef.current) {
+        backPeerRef.current.destroy();
+      }
       if (frontCamera.stream) {
         frontCamera.stream.getTracks().forEach(track => track.stop());
       }
