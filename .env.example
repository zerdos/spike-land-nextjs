# Database Configuration
# PostgreSQL connection string format:
# postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=SCHEMA
#
# Examples:
# - Local: postgresql://postgres:password@localhost:5432/spike_land?schema=public
# - Supabase: postgresql://postgres:[YOUR-PASSWORD]@db.[PROJECT-REF].supabase.co:5432/postgres
# - Railway: postgresql://postgres:[PASSWORD]@[HOST]:[PORT]/railway
# - Neon: postgresql://[USER]:[PASSWORD]@[HOST]/[DATABASE]?sslmode=require
DATABASE_URL=postgresql://postgres:password@localhost:5432/spike_land?schema=public

# Database Connection Pooling (Production)
# Use connection pooling for serverless/edge environments
# DIRECT_URL is for migrations, DATABASE_URL is for queries
# DIRECT_URL=postgresql://postgres:password@localhost:5432/spike_land?schema=public

# NextAuth.js Configuration
# Generate a random secret for AUTH_SECRET:
# - Run: openssl rand -base64 32
# - Or visit: https://generate-secret.vercel.app/32
AUTH_SECRET=your-secret-key-here

# NextAuth URL (development)
# Production: Set this to your production domain (e.g., https://yourdomain.com)
NEXTAUTH_URL=http://localhost:3000

# GitHub OAuth Provider
# To obtain GitHub OAuth credentials:
# 1. Go to: https://github.com/settings/developers
# 2. Click "New OAuth App" or "New GitHub App"
# 3. Set Authorization callback URL to: http://localhost:3000/api/auth/callback/github
# 4. Copy Client ID and generate a Client Secret
GITHUB_ID=your-github-oauth-client-id
GITHUB_SECRET=your-github-oauth-client-secret

# Google OAuth Provider
# To obtain Google OAuth credentials:
# 1. Go to: https://console.cloud.google.com/
# 2. Create a new project or select existing one
# 3. Navigate to "APIs & Services" > "Credentials"
# 4. Click "Create Credentials" > "OAuth client ID"
# 5. Choose "Web application" as application type
# 6. Add authorized redirect URI: http://localhost:3000/api/auth/callback/google
# 7. Copy Client ID and Client Secret
GOOGLE_ID=your-google-oauth-client-id
GOOGLE_SECRET=your-google-oauth-client-secret

# E2E Test Authentication Bypass
# Secret value used to bypass authentication in E2E tests
# - Generate a random secret: openssl rand -base64 32
# - The secret is sent as 'x-e2e-auth-bypass' header by Playwright tests
#
# Configuration Required:
# 1. LOCAL DEVELOPMENT:
#    - Set this in .env.local when running: npm run test:e2e:local
#
# 2. GITHUB ACTIONS CI/CD:
#    - Add to GitHub Secrets: https://github.com/YOUR-ORG/YOUR-REPO/settings/secrets/actions
#    - Name: E2E_BYPASS_SECRET
#    - Value: Same random secret (openssl rand -base64 32)
#
# 3. VERCEL RUNTIME (REQUIRED):
#    - Add to Vercel Environment Variables: https://vercel.com/YOUR-TEAM/YOUR-PROJECT/settings/environment-variables
#    - Name: E2E_BYPASS_SECRET
#    - Value: Same random secret as GitHub
#    - Environments: ✅ Preview, ✅ Development, ❌ Production (DO NOT enable for production)
#
# Why Both GitHub and Vercel?
# - GitHub Secrets: Used during CI/CD build pipeline and E2E test execution
# - Vercel Environment Variables: Used by middleware at runtime on Vercel's edge network
#
# Security Features:
# - Production Protection: Bypass is BLOCKED in production even if secret is configured
#   (requires both NODE_ENV=production AND VERCEL_ENV=production to block)
# - Constant-time Comparison: Uses timingSafeEqual to prevent timing attacks
# - Audit Logging: All bypass attempts are logged with timestamp and environment info
#
# E2E_BYPASS_SECRET=your-e2e-bypass-secret-here
