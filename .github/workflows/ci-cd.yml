name: CI/CD Pipeline

permissions:
  contents: read

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to Vercel after E2E tests'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  # TIER 1: Parallel quality checks (run simultaneously)
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache node_modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies (if cache miss)
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Run linter
        run: npm run lint

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache node_modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies (if cache miss)
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Run security audit
        run: npm audit --audit-level=moderate

  unit-tests:
    name: Unit Tests [${{ matrix.shard }}/4]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard: [1, 2, 3, 4]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache node_modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies (if cache miss)
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Run tests (shard ${{ matrix.shard }}/4)
        run: npm run test:run -- --shard=${{ matrix.shard }}/4

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-shard-${{ matrix.shard }}
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  # Quality gate job that waits for all checks to pass
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint, security-audit, unit-tests]
    if: success()

    steps:
      - name: All quality checks passed
        run: echo "✓ All quality checks passed!"

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: quality-gate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache node_modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies (if cache miss)
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            .next/standalone
          key: ${{ runner.os }}-nextjs-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nextjs-

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build application for Vercel
        run: vercel build
        env:
          NODE_OPTIONS: --max-old-space-size=3072

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            .vercel
            node_modules
            package.json
            package-lock.json
          retention-days: 7
          include-hidden-files: true

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output

      - name: Ensure dependencies are available
        run: npm ci --prefer-offline --no-audit

      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(npm list @playwright/test --depth=0 --json | jq -r '.dependencies["@playwright/test"].version')" >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install chromium --with-deps

      - name: Start dev server
        run: npm run dev &
        env:
          E2E_BYPASS_SECRET: ${{ secrets.E2E_BYPASS_SECRET }}
          NODE_OPTIONS: --max-old-space-size=3072

      - name: Wait for server to be ready
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "Server is ready!"
              exit 0
            fi
            echo "Waiting for server to be ready... ($i/30)"
            sleep 2
          done
          echo "Server failed to start"
          exit 1

      - name: Run E2E tests (localhost)
        env:
          BASE_URL: http://localhost:3000
          E2E_BYPASS_SECRET: ${{ secrets.E2E_BYPASS_SECRET }}
          NODE_OPTIONS: --max-old-space-size=3072
        run: npm run test:e2e:ci

      - name: Upload E2E test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-reports
          path: e2e/reports
          retention-days: 7

  deploy-test:
    name: Deploy to Test Environment
    runs-on: ubuntu-latest
    needs: e2e
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    environment:
      name: test
      url: ${{ steps.deploy.outputs.url }}
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: .

      - name: Restore dependencies and fix permissions
        run: npm ci --prefer-offline --no-audit

      - name: Debug artifact contents
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la | head -20
          echo ""
          echo "Checking for .vercel directory:"
          if [ -d ".vercel" ]; then
            echo "✓ .vercel directory exists"
            echo "Contents of .vercel:"
            ls -la .vercel/ | head -20
          else
            echo "✗ .vercel directory NOT found"
          fi

      - name: Verify build output exists
        run: |
          if [ -d ".vercel/output" ]; then
            echo "✓ .vercel/output directory found"
            ls -la .vercel/output | head -20
          else
            echo "✗ .vercel/output directory NOT found"
            echo "Trying to find any .vercel/output paths:"
            find . -path "*/.vercel/output" -type d 2>/dev/null | head -10
            exit 1
          fi

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Build and Deploy to Test Environment
        id: deploy
        run: |
          # Remove the prebuilt output since we'll rebuild
          rm -rf .vercel/output

          # Build fresh for this environment
          vercel build

          # Deploy the fresh build
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Deployed to TEST: $DEPLOYMENT_URL"
        env:
          NODE_OPTIONS: --max-old-space-size=3072

      - name: Wait for deployment to be live
        run: |
          DEPLOY_URL="${{ steps.deploy.outputs.url }}"
          echo "Checking deployment URL: $DEPLOY_URL"

          for i in {1..60}; do
            # Check if URL is reachable (allow any HTTP status)
            if curl -s -I "$DEPLOY_URL" | grep -q "HTTP"; then
              echo "✓ Deployment is live!"
              exit 0
            fi

            if [ $((i % 10)) -eq 0 ]; then
              echo "Waiting for deployment... ($i/60) - URL: $DEPLOY_URL"
            fi
            sleep 1
          done

          echo "✗ Deployment failed to become live after 60 seconds"
          echo "URL was: $DEPLOY_URL"
          exit 1

      - name: Run smoke tests
        continue-on-error: true
        run: chmod +x scripts/smoke-test.sh && ./scripts/smoke-test.sh "${{ steps.deploy.outputs.url }}" "${{ secrets.E2E_BYPASS_SECRET }}"

      - name: Comment on PR with deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          DEPLOYMENT_URL: ${{ steps.deploy.outputs.url }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deploymentUrl = process.env.DEPLOYMENT_URL;
            const sha = context.payload.pull_request?.head.sha.substring(0, 7) || 'unknown';
            const comment = [
              '## 🚀 Test Deployment Ready',
              '',
              `**URL:** [${deploymentUrl}](${deploymentUrl})`,
              '',
              '✅ E2E tests passed',
              '✅ Smoke tests passed',
              '',
              `**Commit:** ${sha}`,
              `**Workflow:** [#${context.runId}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
            ].join('\n');

            const existingComments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = existingComments.data.find(c =>
              c.body.includes('Test Deployment Ready')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment,
              });
            }

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: e2e
    if: |
      github.ref == 'refs/heads/main' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'true')
    environment:
      name: production
      url: https://next.spike.land
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache node_modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies (if cache miss)
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information (Production)
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build application for Production
        run: vercel build --prod
        env:
          NODE_OPTIONS: --max-old-space-size=3072

      - name: Deploy Project Artifacts to Vercel (Production)
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Deployed to PRODUCTION: $DEPLOYMENT_URL"

      - name: Wait for production deployment to be live
        run: |
          PROD_URL="https://next.spike.land"
          echo "Checking production URL: $PROD_URL"

          for i in {1..60}; do
            # Check if URL is reachable (allow any HTTP status)
            if curl -s -I "$PROD_URL" | grep -q "HTTP"; then
              echo "✓ Production deployment is live!"
              exit 0
            fi

            if [ $((i % 10)) -eq 0 ]; then
              echo "Waiting for production deployment... ($i/60)"
            fi
            sleep 1
          done

          echo "✗ Production deployment failed to become live after 60 seconds"
          exit 1

      - name: Run smoke tests on production
        continue-on-error: true
        run: chmod +x scripts/smoke-test.sh && ./scripts/smoke-test.sh "https://next.spike.land" "${{ secrets.E2E_BYPASS_SECRET }}"
